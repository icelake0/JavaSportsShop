package oop.ica.e2;

import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.ImageIcon;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.JOptionPane;

/**
 * @author Gbemileke Ajiboye - C2479785
 */
public class SportsShopGUI extends javax.swing.JFrame {

    /**
     * @var ArrayList<StockItem>: An array list of all stock items
     */
    private ArrayList<ASCStockItem> stockItems = new ArrayList();

    /**
     * @const string array of JTable column names
     */
    private final String[] ascStockItemColumnNames = {
        "Code", "Title", "Description", "Price", "Quantity"
    };

    /**
     * @const the index of quantity column in columns string array
     */
    private final int QUANTITY_TABLE_COLUMN_INDEX = 4;

    /**
     * @var model class for stock item JTable
     */
    private AbstractTableModel ascStockItemModel;

    /**
     * Creates new form SportsShopGUI
     */
    public SportsShopGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        photoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        buyXButton = new javax.swing.JButton();
        addYButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ascStockItem = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        photoLabel.setBackground(new java.awt.Color(255, 255, 255));
        photoLabel.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        itemLabel.setText("Item Photo");

        javax.swing.GroupLayout photoPanelLayout = new javax.swing.GroupLayout(photoPanel);
        photoPanel.setLayout(photoPanelLayout);
        photoPanelLayout.setHorizontalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(photoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(photoPanelLayout.createSequentialGroup()
                        .addComponent(itemLabel)
                        .addGap(0, 246, Short.MAX_VALUE)))
                .addContainerGap())
        );
        photoPanelLayout.setVerticalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, photoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(itemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        buyXButton.setText("Buy X");
        buyXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyXButtonActionPerformed(evt);
            }
        });

        addYButton.setText("Add Y");

        quitButton.setBackground(new java.awt.Color(255, 51, 0));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        ascStockItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ascStockItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ascStockItemMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(ascStockItem);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(buyXButton)
                        .addGap(18, 18, 18)
                        .addComponent(addYButton)
                        .addGap(18, 18, 18)
                        .addComponent(quitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton)
                    .addComponent(addButton)
                    .addComponent(addYButton)
                    .addComponent(quitButton)
                    .addComponent(buyXButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Load stock data to main class
     *
     * @method loadData
     */
    public void loadData() {
        try {
            this.stockItems = FileService.make().loadData();
        } catch (FileNotFoundException e) {
            this.handleLoadDataException(e);
        } catch (IOException e) {
            this.handleLoadDataException(e);
        }
    }

    /**
     * Handle stock item data load exception
     *
     * @param e Exception
     */
    private void handleLoadDataException(Exception e) {
        this.showError(e.getMessage(), "File loading Error");
        System.err.println(e);
        System.exit(0);
    }

    /**
     * Handle click event for buy button
     *
     * @param evt
     */
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        int selectedRow = ascStockItem.getSelectedRow();

        if (!this.validateSelectedItem(selectedRow)) {
            this.showNoItemSelectedError();
            return;
        }

        ASCStockItem selectedStockItem = stockItems.get(selectedRow);

        if (selectedStockItem.isOutOfStock()) {
            this.showOutOfStockError();
            return;
        }

        selectedStockItem.reduceQuantityOnStockByOne();

        this.updateStockItemTable(selectedStockItem, selectedRow);

        this.showBuyConfirmationMessage(selectedStockItem, 1);
    }//GEN-LAST:event_buyButtonActionPerformed

    /**
     * Handle click event for add button
     *
     * @param evt
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int selectedRow = ascStockItem.getSelectedRow();

        if (!this.validateSelectedItem(selectedRow)) {
            this.showNoItemSelectedError();
            return;
        }

        ASCStockItem selectedStockItem = stockItems.get(selectedRow);

        selectedStockItem.increaseQuantityOnStockByOne();

        this.updateStockItemTable(selectedStockItem, selectedRow);

        this.showAddConfirmationMessage(selectedStockItem, 1);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Handle window open event
     *
     * @param evt
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.loadData();
        this.loadStockItemsTable();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Handle window closing event
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.saveData();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Handle exit button click event
     *
     * @param evt
     */
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        this.saveData();
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    /**
     * Handle stock item table mouse pressed event
     *
     * @param evt
     */
    private void ascStockItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ascStockItemMousePressed
        int selectedRow = ascStockItem.getSelectedRow();
        if (this.validateSelectedItem(selectedRow)) {
            ASCStockItem selectedStockItem = stockItems.get(selectedRow);
            this.photoLabel.setIcon(selectedStockItem.getImageIcon());
            this.itemLabel.setText(selectedStockItem.getproductTitle());
            this.showLowStockWarningMessage(selectedStockItem);
        }
    }//GEN-LAST:event_ascStockItemMousePressed

    /**
     * Handle click event for buyX button
     *
     * @param evt
     */
    private void buyXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyXButtonActionPerformed
        int selectedRow = ascStockItem.getSelectedRow();

        if (!this.validateSelectedItem(selectedRow)) {
            this.showNoItemSelectedError();
            return;
        }

        ASCStockItem selectedStockItem = stockItems.get(selectedRow);

        if (selectedStockItem.isOutOfStock()) {
            this.showOutOfStockError();
            return;
        }

        int selectedValue = this.getInputFromUser(selectedStockItem, "buy");

        if (selectedValue > 0) {
            selectedStockItem.reduceQuantityOnStockByX(selectedValue);
            this.updateStockItemTable(selectedStockItem, selectedRow);
            this.showBuyConfirmationMessage(selectedStockItem, selectedValue);
        }
    }//GEN-LAST:event_buyXButtonActionPerformed

    /**
     * Get input from user using a selection input dialog
     *
     * @param selectedStockItem
     * @param action
     * @return int
     */
    private int getInputFromUser(ASCStockItem selectedStockItem, String action) {
        int selectedValue = -1;
        String dialogTitle = action == "buy" ? "Quantity to purchase" : "Quantity to add";
        try {
            selectedValue = (int) JOptionPane.showInputDialog(this,
                    "Please select the quantity you wish to " + action + " of: \n'" + selectedStockItem.getproductTitle() + "'",
                    dialogTitle,
                    JOptionPane.QUESTION_MESSAGE,
                    this.getInputDialogImageIcon(selectedStockItem),
                    this.getSelectionOptionsInputDialog(selectedStockItem),
                    1
            );
        } catch (NullPointerException e) {
        }

        return selectedValue;
    }

    /**
     * Get the selection options for input dialog
     *
     * @param stockItem
     * @return Object[]
     */
    private Object[] getSelectionOptionsInputDialog(ASCStockItem stockItem) {
        return IntStream.rangeClosed(
                1, stockItem.getQuantityOnStock()
        ).boxed().collect(Collectors.toList()).toArray();
    }

    /**
     * Get an 100 X 100 size of the stock item image to be used for dialog
     *
     * @param stockItem
     * @return ImageIcon
     */
    private ImageIcon getInputDialogImageIcon(ASCStockItem stockItem) {
        return new ImageIcon(
                stockItem.getImageIcon()
                        .getImage()
                        .getScaledInstance(100, 100, Image.SCALE_SMOOTH)
        );
    }

    /**
     * Show low stock warning message
     *
     * @param stockItem
     */
    private void showLowStockWarningMessage(ASCStockItem stockItem) {
        String lowStockMessage = stockItem.isOutOfStock()
                ? "'%s' is out of stock" : "'%s' has only %d unit(s) of stock";
        if (stockItem.isLowOnStock()) {
            this.showWarningMessgae(
                    new Formatter().format(lowStockMessage,
                            stockItem.getproductTitle(), stockItem.getQuantityOnStock()
                    ).toString(), "Low Stock Warning"
            );
        }
    }

    /**
     * Show warning message passed
     *
     * @param message
     * @param title
     */
    private void showWarningMessgae(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Save data stock item to output file
     */
    private void saveData() {
        try {
            FileService.make(stockItems).saveData();
        } catch (IOException e) {
            this.showError("Error while saving output file", "Output File Error");
            System.err.println(e);
        }
    }

    /**
     * Validate that an and item in the table is selected
     *
     * @param selectedRow
     * @return int
     */
    private boolean validateSelectedItem(int selectedRow) {
        return selectedRow >= 0;
    }

    /**
     * Show and error message that no item is selected
     */
    private void showNoItemSelectedError() {
        this.showError("Please select an item from the table", "No Item Selected");
    }

    /**
     * Show and error message that item selected is out of stock
     */
    private void showOutOfStockError() {
        this.showError("The item you have selected is out of stock", "Out Of Stock");
    }

    /**
     * Update the stock item table with quantity changed on stockItem
     *
     * @param selectedStockItem
     * @param selectedRow
     */
    private void updateStockItemTable(ASCStockItem selectedStockItem, int selectedRow) {
        ascStockItemModel.setValueAt(
                selectedStockItem.getQuantityOnStock(),
                selectedRow,
                QUANTITY_TABLE_COLUMN_INDEX
        );
    }

    /**
     * Show confirmation message for item bought
     *
     * @param stockItem
     * @param unitBought
     */
    private void showBuyConfirmationMessage(ASCStockItem stockItem, int unitBought) {
        this.showAConfirmationMessageForAction("bought", stockItem, unitBought, "Confirmation of Sale");
    }

    /**
     * Show confirmation message for item added
     *
     * @param stockItem
     * @param unitAdded
     */
    private void showAddConfirmationMessage(ASCStockItem stockItem, int unitAdded) {
        this.showAConfirmationMessageForAction("added", stockItem, unitAdded, "Confirmation of Item Added");
    }

    /**
     * Show confirmation message for item added or bought
     *
     * @param action
     * @param stockItem
     * @param unit
     * @param title
     */
    private void showAConfirmationMessageForAction(String action, ASCStockItem stockItem, int unit, String title) {
        JOptionPane.showMessageDialog(this,
                new Formatter().format("Item: %s%nPrice: %s%nUnit(s) %s: %d%nStock Remaining: %d",
                        stockItem.getproductTitle(), stockItem.getUnitPriceFull(),
                        action, unit, stockItem.getQuantityOnStock()
                ).toString(), title, JOptionPane.INFORMATION_MESSAGE
        );
    }

    /**
     * Load stock items from array list to table model
     */
    private void loadStockItemsTable() {
        ascStockItemModel = new ASCTableModel(ascStockItemColumnNames, this.stockItems);
        ascStockItem.setModel(ascStockItemModel);
        for (int col = 0; col < ascStockItem.getColumnCount(); col++) {
            TableColumn column = ascStockItem.getTableHeader().getColumnModel().getColumn(col);
            column.setHeaderValue(ascStockItemColumnNames[col]);
        }
    }

    /**
     * Show error message passed
     *
     * @param error
     * @param title
     */
    private void showError(String error, String title) {
        JOptionPane.showMessageDialog(this, error, title, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Application entry point
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SportsShopGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addYButton;
    private javax.swing.JTable ascStockItem;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton buyXButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JPanel photoPanel;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables
}
